service:
  name: serverless-bookshelf-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-plugin-tracing

package: 
  individually: true

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    webpackIncludeModules:
      forceExclude:
        - aws-sdk
    includeModules: true
    packagerOptions:
      scripts:
        - rm -rf node_modules/aws-sdk

provider:
  name: aws
  profile: serverless
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  apiGateway: 
    minimumCompressionSize: 1024

  tracing: 
    lambda: true
    apiGateway: true

  environment:
    BOOKS_TABLE: eshelf-${self:provider.stage}
    USER_ID_INDEX: books-index-${self:provider.environment.BOOKS_TABLE}
    BOOKS_S3_BUCKET: serverless-book-adom-hamza-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    JWKS_URL: 'https://cellmanager12.auth0.com/.well-known/jwks.json'

  
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    tracing: true
   
  # TODO: Configure this function
  GetBooks:
    handler: src/lambda/http/getBooks.handler
    tracing: true
    events:
      - http:
          method: get
          path: books
          cors: true
          authorizer: Auth
    iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
    - Effect: Allow
      Action: 
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: 
        - '*'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.BOOKS_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}

  # TODO: Configure this function
  
  CreateBook:
    handler: src/lambda/http/createBook.handler
    tracing: true
    events:
      - http:
          method: post
          path: books
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action: 
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.BOOKS_S3_BUCKET}/*
     
    
      
  # TODO: Configure this function
  DeleteBook:
    handler: src/lambda/http/deleteBook.handler
    tracing: true
    events:
      - http:
          method: delete
          path: books/{bookId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action: 
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.BOOKS_S3_BUCKET}/*


  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: books/{bookId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action: 
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.BOOKS_S3_BUCKET}/*

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX: #for 4xx errors
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTION,POST'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    BooksDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: bookId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BOOKS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: bookId
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BOOKS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
   
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
              - s3:GetObject
              - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.BOOKS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

